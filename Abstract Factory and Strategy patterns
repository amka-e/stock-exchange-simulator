// Strategy Pattern Implementation
interface ITradingStrategy {
    void trade(Event event);
}

class ConservativeTradingStrategy implements ITradingStrategy {
    public void trade(Event event) {
        // Conservative trading logic
        System.out.println("Conservative trade for " + event.getTicker());
    }
}

class AggressiveTradingStrategy implements ITradingStrategy {
    public void trade(Event event) {
        // Aggressive trading logic
        System.out.println("Aggressive trade for " + event.getTicker());
    }
}

// Abstract Trading Agent
abstract class TradingAgent {
    protected ITradingStrategy strategy;
    
    public TradingAgent(ITradingStrategy strategy) {
        this.strategy = strategy;
    }
    
    public void handleEvent(Event event) {
        strategy.trade(event);
    }
}

// Concrete Agent Types
class InstitutionalTradingAgent extends TradingAgent {
    public InstitutionalTradingAgent(ITradingStrategy strategy) {
        super(strategy);
    }
}

class RetailTradingAgent extends TradingAgent {
    public RetailTradingAgent(ITradingStrategy strategy) {
        super(strategy);
    }
}

// Abstract Factory Pattern
abstract class AbstractTradingAgentFactory {
    public abstract TradingAgent createAgent(String style);
}

class InstitutionalAgentFactory extends AbstractTradingAgentFactory {
    public TradingAgent createAgent(String style) {
        ITradingStrategy strategy = style.equals("Aggressive") 
            ? new AggressiveTradingStrategy() 
            : new ConservativeTradingStrategy();
        return new InstitutionalTradingAgent(strategy);
    }
}

class RetailAgentFactory extends AbstractTradingAgentFactory {
    public TradingAgent createAgent(String style) {
        ITradingStrategy strategy = style.equals("Aggressive") 
            ? new AggressiveTradingStrategy() 
            : new ConservativeTradingStrategy();
        return new RetailTradingAgent(strategy);
    }
}

// Usage Example
public class StrategyFactorySolution {
    public static void main(String[] args) {
        AbstractTradingAgentFactory factory = new InstitutionalAgentFactory();
        TradingAgent agent = factory.createAgent("Conservative");
        agent.handleEvent(new Event("AAPL"));
    }
}
