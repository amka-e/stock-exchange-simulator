// Observer Interface
interface INewsObserver {
    void update(Event event);
}

// Subject Interface
interface INewsSubject {
    void registerObserver(INewsObserver observer, String ticker);
    void notifyObservers(Event event);
}

// Concrete Subject
class NewsBoard implements INewsSubject {
    private Map<String, Set<INewsObserver>> observers = new HashMap<>();
    
    public void registerObserver(INewsObserver observer, String ticker) {
        observers.computeIfAbsent(ticker, k -> new HashSet<>()).add(observer);
    }
    
    public void notifyObservers(Event event) {
        Set<INewsObserver> tickerObservers = observers.get(event.getTicker());
        if (tickerObservers != null) {
            tickerObservers.forEach(o -> o.update(event));
        }
    }
    
    public void runEventsList(Queue<Event> events) {
        while (!events.isEmpty()) {
            Event event = events.poll();
            notifyObservers(event);
        }
    }
}

// Modified TradingAgent (Observer)
class TradingAgent implements INewsObserver {
    private ITradingStrategy strategy;
    private Set<String> subscribedTickers = new HashSet<>();
    
    public TradingAgent(ITradingStrategy strategy, NewsBoard newsBoard, String ticker) {
        this.strategy = strategy;
        this.subscribedTickers.add(ticker);
        newsBoard.registerObserver(this, ticker);
    }
    
    public void update(Event event) {
        if (subscribedTickers.contains(event.getTicker())) {
            strategy.trade(event);
        }
    }
}

// Usage Example
public class ObserverSolution {
    public static void main(String[] args) {
        NewsBoard newsBoard = new NewsBoard();
        ITradingStrategy strategy = new ConservativeTradingStrategy();
        
        TradingAgent agent = new TradingAgent(strategy, newsBoard, "AAPL");
        
        Queue<Event> events = new LinkedList<>();
        events.add(new Event("AAPL"));
        events.add(new Event("MSFT"));
        
        newsBoard.runEventsList(events); // Only notifies for AAPL event
    }
}
